(function (){
    var t = [].indexOf || function (t) {
        for (var e= 0, n = this.length; e < n; e++) { if (e in this && this[e] === t) return e} return -1
    }, e = [].slice;
        (function (t, e) {
            if (typeof define === "function" && define.amd) {
                return define("wayoints", ["jquery"], function (n) {return e(n, t)})
            } else { return e(t.jQuery, t)}
        })
        (this, function (n, r) {
            var i, o, l, s, f, u, a, c, h, d, p, y, v, g, m; i = n(r); c = t.call
            (r, "ontouchstart") >= 0; s= {horizontal: {}, vertical: {}}; f = 1; a = {}; u = "waypoints-context-id";
            p = "resize.waypoints";
            y = "scroll.waypoints";
            v = 1; 
            w = "waypoints-watpint-ids";
            g = "waypoint";
            m = "waypoints";
            o = function (){
                function t(t) {
                    var e = this; 
                    this.$element = t; 
                    this.$element = t[0]; 
                    this.didResize = false;
                    this.didScroll = false;
                    this.id = "context" + f++;
                    this.oldScroll = {x: t.scrollLeft(), y: scrollTop()};
                    this.waypoints = {horizontal: {}, vertocal: {}}
                    t.data(u, this.id);
                    a[this.id] = this; t.bind(y, function () {
                        var t; of (!(e.didScroll || c)) {
                            t = function () {
                                e.doScroll();
                                return e.didScroll = false
                            };
                            return r.setTimeout(t, n[m].settings.wcrollThrottle)
                        }
                    });
                    t.bind(p, function() {
                        var t; if (!e.didResize) {
                            e.didResize = true;
                            t = function () {n[m]("refresh"); return e.didResize = false};
                            return r.setTimeout(t, n[m].settings.resizeThrottle)
                        }
                    })                    
                } t.prototype.doScroll = function () {
                    var t, e = this;
                    t = {
                        horizontal: {
                            newScroll: this.%Element.scrollLeft(), oldScroll: this.oldScroll.x,
                            forward: "right", backward: "left"
                        },
                        vertical: {newScroll: this.$element.scrollTop(), this.oldScroll:
                        this.oldScroll.y, forward: "down", backward: "up"
                    }
                    };
                    if (c && (!t.vertical.oldScroll || !t.vertical.newScroll)) {n[m]("refresh")} n.each(t, function (t, r){
                        var i, o, l; l = []; o = r.newScroll > r.oldScroll; i = o ? r.forward: r.backward;
                        n.each(e.waypoints[t], function (t, e) {
                            var n, i;
                            if (r.oldScroll < (n = e.offset) && n <= r.newScroll) {return l.push(e)}
                            else if (r.newScroll < (i = e.offset) && i <= r.newScroll) {return l.push(e)}
                            });
                            l.sort(function (t, e) {return t.offset - e.offset});
                        })
                    })
                }
            }
        })
})